package hadoop8614;
/*
 * InvokeStaticInstrumenter inserts count instructions before
 * INVOKESTATIC bytecode in a program. The instrumented program will
 * report how many static invocations happen in a run.
 *
 * Goal:
 *   Insert counter instruction before static invocation instruction.
 *   Report counters before program's normal exit point.
 *
 * Approach:
 *   1. Create a counter class which has a counter field, and
 *      a reporting method.
 *   2. Take each method body, go through each instruction, and
 *      insert count instructions before INVOKESTATIC.
 *   3. Make a call of reporting method of the counter class.
 *
 * Things to learn from this example:
 *   1. How to use Soot to examine a Java class.
 *   2. How to insert profiling instructions in a class.
 */

/* InvokeStaticInstrumenter extends the abstract class BodyTransformer,
 * and implements <pre>internalTransform</pre> method.
 */
import soot.*;
import soot.javaToJimple.LocalGenerator;
import soot.jimple.*;
import soot.jimple.internal.JAssignStmt;
import soot.jimple.internal.JEqExpr;
import soot.jimple.internal.JIfStmt;
import soot.jimple.internal.JSpecialInvokeExpr;
import soot.util.*;
import utils.Condition;
import utils.ExtraCondition;
import utils.LoopPath;
import utils.LoopPathFinder;
import utils.MethodUtils;
import utils.PathExit;
import ioMethodLib.IOFuncRetRange;

import java.util.*;

public class InvokeStaticInstrumenterBak extends BodyTransformer{


  /* internalTransform goes through a method body and inserts
   * counter instructions before an INVOKESTATIC instruction
   */
  protected void internalTransform(Body body, String phase, Map options) {
    // body's method
//    SootMethod method = body.getMethod();
//    // debugging
//    System.out.println("instrumenting method : " + method.getSignature());
//    
    LoopPathFinder loopfinder = new LoopPathFinder();
    loopfinder.transform(body);
    Set<PathExit> exitPaths = loopfinder.getExitPath();
    List<LoopPath> nonExitPaths = loopfinder.getNonExitPath();
    List<LoopPath> allPaths = loopfinder.getAllPath();
//    Map<Value, SootMethod> valMethodMap = new HashMap<Value, SootMethod>();
    SootMethod ioMethod = null;
//    G.v().out.println("nonExitPaths.size = " + nonExitPaths.size()+"!!!!!!");
    for(LoopPath path : nonExitPaths){
    	List<Stmt> pathStmts = path.getpathStmt();
    	Value retIOVal = null;
        boolean foundRetVal = false;
        boolean foundAssign = false;
//    	List<Stmt> stmtsInvokeNAssignIndex = new ArrayList<Stmt>();//store the stmts which are in between the invocation stmt and the assign the i/o ret to loop index
    	Stmt afterPatchStmt = null;
    	
        for(Stmt stmt : pathStmts){
        	if(!foundRetVal) {//currently, consider the i/o invocation is on the loop path
        		// there are many kinds of statements, here we are only interested in statements containing InvokeStatic
        		// NOTE: there are two kinds of statements may contain invoke expression: InvokeStmt, and AssignStmt
                if (!stmt.containsInvokeExpr()) {
                  continue;
                }

                // take out the invoke expression
                InvokeExpr expr = (InvokeExpr)stmt.getInvokeExpr();
                String invokeMethodStr = expr.getMethod().getDeclaringClass().toString();
//        	  	G.v().out.println(invokeMethodStr);
                boolean isIOClass = invokeMethodStr.equals("java.io.InputStream");
          	  	if(isIOClass){
          	  		retIOVal = stmt.getDefBoxes().get(0).getValue();
          	  		foundRetVal = true;
          	  		ioMethod = expr.getMethod();
          	  		G.v().out.println("retIOVal = " + retIOVal.toString());
//          		G.v().out.println(ioMethod.getSubSignature());
          	  		continue;
          	  	}
            } else if(foundRetVal & !foundAssign){
//            	stmtsInvokeNAssignIndex.add(stmt);
            	if(stmt instanceof JAssignStmt){
          		  boolean useRetIO = false, useitself = false;
          		  Value assignVal = stmt.getDefBoxes().get(0).getValue();
          		  for(ValueBox vb : stmt.getUseBoxes()){
          			  if(vb.getValue().equals(retIOVal)){
          				  useRetIO = true;
          			  } else if(vb.getValue().equals(assignVal)){
          				  useitself = true;
          			  }
          		  }
          		  
          		  boolean isIOtoBound = false;
          		  if(useRetIO & useitself){ //check whether it is a bound variable appearing in exit conditions
          			  G.v().out.println("assignVal = " + assignVal.toString());
          			  List<Condition> pathConds = new ArrayList<Condition>();
          			  pathConds = ExtraCondition.extractEqualConditions(path, null);
          			  for(Condition cond : pathConds){
          				G.v().out.println("cond = " + cond.cond.toString());
        				  if(cond.cond.getOp1().equals(assignVal) || cond.cond.getOp2().equals(assignVal)){	
        					isIOtoBound = true;
        					break;
        				  }
          			  }
          		  }
          		  if(isIOtoBound){
          			  foundAssign = true;
          			  afterPatchStmt = stmt;
          		  }
          	  }
           } 
        }
        
        for(Stmt stmt :  MethodUtils.getMethodAllStmts(body)){
        	 if (!stmt.containsInvokeExpr()) {
                 continue;
        	 }
             // take out the invoke expression
             InvokeExpr expr = (InvokeExpr)stmt.getInvokeExpr();
             if(expr instanceof JSpecialInvokeExpr){
            	 G.v().out.println("methodRef = " + ((JSpecialInvokeExpr)expr).getMethodRef());
            	 G.v().out.println("Base = " + ((JSpecialInvokeExpr)expr).getBase());
            	 G.v().out.println("arg = " + ((JSpecialInvokeExpr)expr).getArgBox(0));
             }
        }
        
        if(foundAssign){
//        	G.v().out.println("foundAssign!!!");
        	List<Condition> pathConds = new ArrayList<Condition>();
			pathConds = ExtraCondition.extractEqualConditions(path, null);
			List<ConditionExpr> dicCondList = IOFuncRetRange.ioFuncRetLib.get(ioMethod.getDeclaringClass().toString()).get(ioMethod.getSubSignature().toString());
			List<ConditionExpr> patchCondList = new ArrayList<ConditionExpr>();
			for(ConditionExpr cond2 : dicCondList){
				G.v().out.println("diccond = " + cond2);
				boolean containornot = false;
				for(Condition cond : pathConds){
//					G.v().out.println("pathcond = " + cond.cond);
					if(cond.cond.getOp1().equals(retIOVal)){
						G.v().out.println("pathcond = " + cond.cond);
						if(IOFuncRetRange.containCond(cond.cond, cond2)){
							G.v().out.println("pathcond contains diccond");
							containornot = true;
							break;
						}
					}
				}
				if(containornot) //if contains the condition in the dictionary, should add extra checking for this condition in the org loop path to avoid hang.
					patchCondList.add(cond2);
			}
			if(patchCondList.size() > 0){
				G.v().out.println("patchCondList.size = " + patchCondList.size());
				G.v().out.println("ioVariable: " + retIOVal.toString());
				for(ConditionExpr cond : patchCondList){
					G.v().out.println("patchCond = " + cond.toString());
					G.v().out.println("afterPatchStmt = " + afterPatchStmt);
					if(cond instanceof JEqExpr){
						//insert exception stmt
						RefType runtimeExceptionType = RefType.v("java.io.IOException");
						SootMethodRef cref = Scene.v().makeConstructorRef(runtimeExceptionType.getSootClass(),
								Collections.<Type>singletonList(RefType.v("java.lang.String")));
//						G.v().out.println("cref = " + cref);
						LocalGenerator lg = new LocalGenerator(body);
					    Local exceptionLocal = lg.generateLocal(runtimeExceptionType);
					    AssignStmt assignStmt = Jimple.v().newAssignStmt(exceptionLocal, Jimple.v().newNewExpr(runtimeExceptionType));
					    
					    G.v().out.println("exceptionLocal = " + exceptionLocal + ", type = " + exceptionLocal.getType());
					    String errorMsg = IOFuncRetRange.ioFuncErrMsgLib.get(ioMethod.getDeclaringClass().toString()).get(ioMethod.getSubSignature().toString());
						SpecialInvokeExpr constructorInvokeExpr = Jimple.v().newSpecialInvokeExpr(exceptionLocal, cref,
								StringConstant.v(errorMsg));
						InvokeStmt invokeStmt = Jimple.v().newInvokeStmt(constructorInvokeExpr);
						ThrowStmt throwStmt = Jimple.v().newThrowStmt(exceptionLocal);
						
						//insert if stmt
						IfStmt ifstmt = Jimple.v().newIfStmt(Jimple.v().newNeExpr(retIOVal, cond.getOp2()),
								afterPatchStmt);
						Chain units = body.getUnits();
//						G.v().out.println("ifstmt = " + ifstmt);
						units.add(ifstmt); //using add function can create a new label for the new stmts.
						units.add(assignStmt);
						units.add(invokeStmt);
						units.add(throwStmt);
//						units.insertBefore(initStmt, afterPatchStmt);//this can cause new stmt and old stmt use the same label, resulting an infinite loop
//						units.insertBefore(ifstmt, initStmt);
						
						//checking whether there are other stmts jump to the afterPatchStmt, then redirect them
						for(Stmt stmt :  pathStmts){
							if(stmt instanceof JIfStmt){
								G.v().out.println();
								if(((JIfStmt)stmt).getTarget().equals(afterPatchStmt)){
//									G.v().out.println("the old ifstmt = " + stmt);
									IfStmt ifstmtRep = Jimple.v().newIfStmt(((JIfStmt)stmt).getCondition(),
											ifstmt);
									units.insertBefore(ifstmtRep, stmt);
									units.remove(stmt);//replaces the old if stmt
								}
							}
						}
					}
				}		
			}
        }
	 }
  }
}
